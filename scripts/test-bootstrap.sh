#!/usr/bin/env bash
set -evx

if [ $# -gt 3 ]; then
  echo "Usage: $0 launcher-path local-version tmp-directory" 1>&2
  exit 1
fi

cd "$(dirname "${BASH_SOURCE[0]}")/.."

BASE="$(pwd)"

if [ $# -ge 1 ]; then
  COURSIER="$1" # path to the launcher to test
else
  if [ ! -x "modules/cli/target/pack/bin/coursier" ]; then
    sbt cli/pack
  fi

  COURSIER="$(pwd)/modules/cli/target/pack/bin/coursier"
fi

if [ $# -ge 2 ]; then
  LOCAL_VERSION="$2"
else
  LOCAL_VERSION="0.1.0-test-SNAPSHOT"
  if [ ! -e "$HOME/.ivy2/local/io.get-coursier/coursier-cli_2.12/$LOCAL_VERSION/jars/coursier-cli_2.12.jar" ]; then
    sbt "set version in ThisBuild := \"$LOCAL_VERSION\"" publishLocal
  fi
fi

if [ $# -ge 3 ]; then
  TMP="$3"
  mkdir -p "$TMP"
  DO_CLEANUP=0
else
  TMP="$(mktemp -d)"
  DO_CLEANUP=1
fi

echo "Temporary directory: $TMP"

cleanup() {
  [ "$DO_CLEANUP" = "0" ] || rm -rf "$TMP"
}

trap cleanup EXIT INT TERM

if echo "$OSTYPE" | grep -q darwin; then
  GREP="ggrep"
else
  GREP="grep"
fi

generateLauncher() {
  VERSION="$LOCAL_VERSION" OUTPUT="$TMP/coursier-test" scripts/generate-launcher.sh -r ivy2Local
}

generateLauncher

cd "$TMP"

require() {
  if ! "$COURSIER" --require 1.0.3; then
    echo "Error: expected --require 1.0.3 to succeed." 1>&2
    exit 1
  fi
  if "$COURSIER" --require 41.0.3; then
    echo "Error: expected --require 41.0.3 to fail." 1>&2
    exit 1
  fi
}


launcherSimple() {
  ./coursier-test bootstrap -o cs-echo-launcher io.get-coursier:echo:1.0.0
  if [ "$(./cs-echo-launcher foo)" != foo ]; then
    echo "Error: unexpected output from bootstrapped echo command (generated by proguarded launcher)." 1>&2
    exit 1
  fi
}

launcherJavaArgs() {
  if [ "$(./cs-echo-launcher -J-Dother=thing foo -J-Dfoo=baz)" != foo ]; then
    echo "Error: unexpected output from bootstrapped echo command (generated by proguarded launcher)." 1>&2
    exit 1
  fi
}

launcherArgsPacking() {
  if [ "$(./cs-echo-launcher "-n foo")" != "-n foo" ]; then
    echo "Error: unexpected output from bootstrapped echo command (generated by proguarded launcher)." 1>&2
    exit 1
  fi
}

launcherJavaProps() {
  # run via the launcher rather than via the sbt-pack scripts, because the latter interprets -Dfoo=baz itself
  # rather than passing it to coursier since https://github.com/xerial/sbt-pack/pull/118
  ./coursier-test bootstrap -o cs-props -D other=thing --java-opt -Dfoo=baz io.get-coursier:props:1.0.2 --jvm-option-file=.propsjvmopts
  local OUT="$(./cs-props foo)"
  if [ "$OUT" != baz ]; then
    echo -e "Error: unexpected output from bootstrapped props command.\n$OUT" 1>&2
    exit 1
  fi
  local OUT="$(./cs-props other)"
  if [ "$OUT" != thing ]; then
    echo -e "Error: unexpected output from bootstrapped props command.\n$OUT" 1>&2
    exit 1
  fi
}

launcherJavaPropsArgs() {
 if [ "$(./cs-props -J-Dhappy=days happy)" != days ]; then
   echo "Error: unexpected output from bootstrapped props command." 1>&2
   exit 1
 fi
}

launcherJavaPropsJvmOptionFile() {
  echo "-Dhappy=days" > .propsjvmopts
  if [ "$(./cs-props happy)" != days ]; then
    echo "Error: unexpected output from bootstrapped props command." 1>&2
    exit 1
  fi
  rm -f .propsjvmopts
}

launcherJavaPropsEnv() {
  if [ "$(JAVA_OPTS=-Dhappy=days ./cs-props happy)" != days ]; then
    echo "Error: unexpected output from bootstrapped props command." 1>&2
    exit 1
  fi
}

launcherJavaPropsEnvMulti() {
  if [ "$(JAVA_OPTS="-Dhappy=days -Dfoo=other" ./cs-props happy)" != days ]; then
    echo "Error: unexpected output from bootstrapped props command." 1>&2
    exit 1
  fi
}

launcherAssembly() {
  ./coursier-test bootstrap -a -o cs-props-assembly -D other=thing --java-opt -Dfoo=baz io.get-coursier:props:1.0.2
  local OUT="$(./cs-props-assembly foo)"
  if [ "$OUT" != baz ]; then
    echo -e "Error: unexpected output from assembly props command.\n$OUT" 1>&2
    exit 1
  fi
  local OUT="$(./cs-props-assembly other)"
  if [ "$OUT" != thing ]; then
    echo -e "Error: unexpected output from assembly props command.\n$OUT" 1>&2
    exit 1
  fi
}

resolveRules() {
  # just checking that this doesn't crash with a ClassNotFoundException because
  # of shading
  ./coursier-test resolve \
    -r jitpack \
    sh.almond:scala-kernel_2.12.8:0.3.0 \
    --rule 'SameVersion(com.fasterxml.jackson.core:jackson-*)'
}

installInlineApp() {
  local DIR="target/test-install"
  rm -rf "$DIR"
  "$COURSIER" install --install-dir "$DIR" 'echo:{"dependencies": ["io.get-coursier:echo:1.0.1"], "repositories": ["central"]}'
  local OUT="$("$DIR/echo" foo)"
  rm -rf "$DIR"
  if [ "$OUT" != foo ]; then
    echo "Error: unexpected output from installed inline echo app command." 1>&2
    exit 1
  fi
}

enVarInstalledApp() {
  local DIR="target/test-install-2"
  rm -rf "$DIR"
  "$COURSIER" install --install-dir "$DIR" 'env:{"dependencies": ["io.get-coursier:env:1.0.4"], "repositories": ["central"]}'
  local CS_JVM_LAUNCHER_OUT="$("$DIR/env" CS_JVM_LAUNCHER)"
  local IS_CS_INSTALLED_LAUNCHER_OUT="$("$DIR/env" IS_CS_INSTALLED_LAUNCHER)"
  # rm -rf "$DIR"
  if [ "$CS_JVM_LAUNCHER_OUT" != true ]; then
    echo "Error: unexpected value of CS_JVM_LAUNCHER from installed app." 1>&2
    exit 1
  fi
  if [ "$IS_CS_INSTALLED_LAUNCHER_OUT" != true ]; then
    echo "Error: unexpected value of IS_CS_INSTALLED_LAUNCHER from installed app." 1>&2
    exit 1
  fi
}

require

launcherSimple
launcherJavaArgs
launcherArgsPacking
launcherJavaProps
launcherJavaPropsArgs
launcherJavaPropsJvmOptionFile
launcherJavaPropsEnv
launcherJavaPropsEnvMulti
launcherAssembly

resolveRules

installInlineApp

enVarInstalledApp
